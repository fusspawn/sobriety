<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AwesomiumSharp</name>
    </assembly>
    <members>
        <member name="T:AwesomiumSharp.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ActivateIME">
            <summary>
              Looks up a localized string similar to Activate IME.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.AddURLFilter">
            <summary>
              Looks up a localized string similar to Add URL Filter.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.CancelIMEComposition">
            <summary>
              Looks up a localized string similar to Cancel IME Composition.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ChooseFile">
            <summary>
              Looks up a localized string similar to Choose File.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ClearAllURLFilters">
            <summary>
              Looks up a localized string similar to Clear all URL filters.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ConfirmIMEComposition">
            <summary>
              Looks up a localized string similar to Confirm IME Composition.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.CopyHTML">
            <summary>
              Looks up a localized string similar to Copy HTML.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.CopyLinkAddress">
            <summary>
              Looks up a localized string similar to Copy Link Address.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.CreateObject">
            <summary>
              Looks up a localized string similar to Create Object.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.DestroyObject">
            <summary>
              Looks up a localized string similar to Destroy Object.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ERR_InvalidWebView">
            <summary>
              Looks up a localized string similar to This WebView instance is invalid. It has either been destroyed or it was never properly instantiated..
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ERR_WebControlDisabled">
            <summary>
              Looks up a localized string similar to The control is disabled either manually or it has been destroyed..
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.LoadFile">
            <summary>
              Looks up a localized string similar to Load File.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.LoadURL">
            <summary>
              Looks up a localized string similar to Load URL.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.ResetZoom">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.StopFind">
            <summary>
              Looks up a localized string similar to Stop Find.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.TITLE_Crashed">
            <summary>
              Looks up a localized string similar to Crached!.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.TITLE_Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.TITLE_Loading">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Resources.TITLE_Navigating">
            <summary>
              Looks up a localized string similar to Navigating....
            </summary>
        </member>
        <member name="T:AwesomiumSharp.BeginNavigationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.BeginNavigation"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginNavigation"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.BeginNavigationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.BeginNavigationEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.BeginNavigation"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginNavigation"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.UrlEventArgs">
            <summary>
            Provides data for events that provide a URL.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.BeginLoadingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.BeginLoading"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginLoading"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.BeginLoadingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.BeginLoadingEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.BeginLoading"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginLoading"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ResourceRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.ResourceRequest"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceRequest"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ResourceRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ResourceRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.ResourceRequest"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceRequest"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.WebSelectionChangedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.SelectionChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectionChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.WebSelectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.WebSelectionEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.SelectionChanged"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectionChanged"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ImeUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.ImeUpdated"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ImeUpdated"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.UpdateImeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.UpdateImeEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.ImeUpdated"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ImeUpdated"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.JSConsoleMessageAddedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.JSConsoleMessageAdded"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.JSConsoleMessageAdded"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.JSConsoleMessageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.JSConsoleMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.JSConsoleMessageAdded"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.JSConsoleMessageAdded"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.WebView">
            <summary>
            The WebView is sort of like a tab in Chrome: you can load web-pages into it, interact with it, 
            and render it to a buffer (we give you the raw pixels, its your duty to display it).
            </summary>
            <remarks>
            You can create a WebView using <see cref="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)"/>. If you have not initialized
            the <see cref="T:AwesomiumSharp.WebCore"/> (see <see cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>) before creating a <see cref="T:AwesomiumSharp.WebView"/>,
            the core will be initialized using default configuration settings and automatically be started
            before creating the view.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:AwesomiumSharp.ViewModel">
            <summary>
            This abstract class implements <see cref="T:System.IDisposable"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            and provides the main logic that helps subclasses be MVVM friendly.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:AwesomiumSharp.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:AwesomiumSharp.ViewModel.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.ViewModel.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ViewModel.OnDispose">
            <summary>
            Called when an instance of this class is being disposed.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ViewModel.System#IDisposable#Dispose">
            <summary>
            For Awesomium scenario, we do not let access to this method.
            To maintain a common contract for both WebView and WebControl,
            we prefer to expose this functionality through a Close method.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.ViewModel.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.ViewModel.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnIsDirtyChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnBeginLoading(System.Object,AwesomiumSharp.BeginLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.BeginLoading"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnBeginNavigation(System.Object,AwesomiumSharp.BeginNavigationEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnCursorChanged(System.Object,AwesomiumSharp.ChangeCursorEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnKeyboardFocusChanged(System.Object,AwesomiumSharp.ChangeKeyboardFocusEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.KeyboardFocusChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnTargetUrlChanged(System.Object,AwesomiumSharp.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.TargetUrlChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnToolTipChanged(System.Object,AwesomiumSharp.ChangeToolTipEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnDomReady(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.DomReady"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnLoadCompleted(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.LoadCompleted"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnPageContentsReceived(System.Object,AwesomiumSharp.GetPageContentsEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.PageContentsReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnOpenExternalLink(System.Object,AwesomiumSharp.OpenExternalLinkEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.OpenExternalLink"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnPluginCrashed(System.Object,AwesomiumSharp.PluginCrashedEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.PluginCrashed"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnTitleReceived(System.Object,AwesomiumSharp.ReceiveTitleEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.TitleReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnMove(System.Object,AwesomiumSharp.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.Move"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnDownload(System.Object,AwesomiumSharp.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.Download"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnCrashed(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.Crashed"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnSelectLocalFiles(System.Object,AwesomiumSharp.SelectLocalFilesEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnScrollDataReceived(System.Object,AwesomiumSharp.ScrollDataEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.ScrollDataReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnJSConsoleMessageAdded(System.Object,AwesomiumSharp.JSConsoleMessageEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.JSConsoleMessageAdded"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnFindResultsReceived(System.Object,AwesomiumSharp.GetFindResultsEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.FindResultsReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnSelectionChanged(System.Object,AwesomiumSharp.WebSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnImeUpdated(System.Object,AwesomiumSharp.UpdateImeEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.ImeUpdated"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnResourceRequest(System.Object,AwesomiumSharp.ResourceRequestEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.ResourceRequest"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnResourceResponse(System.Object,AwesomiumSharp.ResourceResponseEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.WebView.ResourceResponse"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.Close">
            <summary>
            Destroys and removes this <see cref="T:AwesomiumSharp.WebView"/> instance. Any call to members of this view
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, Make sure you do not call this method when the hosting UI 
            (if any) of this view, is still alive and visible.
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnDispose">
            <summary>
            Overrides <see cref="M:AwesomiumSharp.ViewModel.OnDispose"/>. This method is called
            when the view is being destroyed by either calling <see cref="M:AwesomiumSharp.WebCore.Shutdown"/>,
            <see cref="M:AwesomiumSharp.WebView.Close"/> or explicitly calling <see cref="M:System.IDisposable.Dispose"/> on this instance.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebView.LoadURL(System.String,System.String,System.String,System.String)">
            <summary>
            Loads a URL into the WebView asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <param name="username">
            If the URL requires authentication, the username to authorize as, otherwise just pass an empty string.
            </param>
            <param name="password">
            If the URL requires authentication, the password to use, otherwise just pass an empty string.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.LoadHTML(System.String,System.String)">
            <summary>
            Loads a string of HTML into the WebView asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <param name="frameName">
            The name of the frame to load the HTML in.
            </param>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.LoadFile(System.String,System.String)">
            <summary>
            Loads a local file into the <see cref="T:AwesomiumSharp.WebView"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <param name="frameName">
            The name of the frame to load the file in.
            </param>
            <remarks>
            The file should exist within the base directory set with <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.GoBack">
            <summary>
            Navigates one step back in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Reload">
            <summary>
            Reloads the current page.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ExecuteJavascriptWithResult(System.String,System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:AwesomiumSharp.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.CallJavascriptFunction(System.String,System.String,System.String,AwesomiumSharp.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="frameName">
            Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.CreateObject(System.String)">
            <summary>
            Creates a new global Javascript object that will persist throughout
            the lifetime of this <see cref="T:AwesomiumSharp.WebView"/>. This is useful for exposing your application's
            data and events to Javascript. This object is managed directly by Awesomium
            so you can modify its properties and bind callback functions via
            <see cref="M:AwesomiumSharp.WebView.SetObjectProperty(System.String,System.String,AwesomiumSharp.JSValue)"/> and <see cref="M:AwesomiumSharp.WebView.SetObjectCallback(System.String,System.String,AwesomiumSharp.JSCallback)"/>, 
            respectively.
            </summary>
            <param name="objectName">
            The name of the object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.DestroyObject(System.String)">
            <summary>
            Destroys a Javascript object previously created with <see cref="M:AwesomiumSharp.WebView.CreateObject(System.String)"/>.
            </summary>
            <param name="objectName">
            The name of the object to destroy.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetObjectProperty(System.String,System.String,AwesomiumSharp.JSValue)">
            <summary>
            Sets a property of a Javascript object previously created with <see cref="M:AwesomiumSharp.WebView.CreateObject(System.String)"/>.
            </summary>
            <example>
            An example of usage:
            <code>
            webView.CreateObject("MyObject");
            webView.SetObjectProperty("MyObject", "color", "blue");
            
            // You can now access this object's property via Javascript on any 
            // page loaded into this WebView:
            var myColor = MyObject.color; // value would be "blue"
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="propertyName">
            The name of the property to create.
            </param>
            <param name="val">
            The initial javascript-value of the property.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetObjectCallback(System.String,System.String,AwesomiumSharp.JSCallback)">
            <summary>
            Binds a callback function to a Javascript object previously created with <see cref="M:AwesomiumSharp.WebView.CreateObject(System.String)"/>.
            This is very useful for passing events from Javascript to your application.
            </summary>
            <example>
            An example of usage:
            <code>
            public void OnSelectItem(object sender, JSCallbackEventArgs e)
            {
                System.Console.WriteLine( "Player selected item: " + e.args[0].ToString() );
            }
            
            public void initWebView()
            {
                webView.CreateObject("MyObject");
                webView.SetObjectCallback("MyObject", "SelectItem", OnSelectItem);
            }
            
            // You can now call the function "OnSelectItem" from Javascript:
            MyObject.SelectItem("shotgun");
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="callbackName">
            The name of the Javascript function that will call the callback.
            </param>
            <param name="callback">
            Reference to a <see cref="T:AwesomiumSharp.JSCallback"/> implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Render">
            <summary>
            Renders this <see cref="T:AwesomiumSharp.WebView"/> into an offscreen pixel buffer and clears the dirty state.
            </summary>
            <remarks>
            For maximum efficiency, you should only call this when the <see cref="T:AwesomiumSharp.WebView"/> is dirty 
            (see <see cref="P:AwesomiumSharp.WebView.IsDirty"/>).
            <p/>
            <note type="tip">
            The most appropriate time to call this method, is from within your <see cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/> handler.
            </note>
            </remarks>
            <returns>
            An instance of the <see cref="T:AwesomiumSharp.RenderBuffer"/> that this <see cref="T:AwesomiumSharp.WebView"/> was rendered to. 
            This value may change between renders and may return null if the <see cref="T:AwesomiumSharp.WebView"/> has crashed
            (see <see cref="P:AwesomiumSharp.WebView.IsCrashed"/>).
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.PauseRendering">
            <summary>
            Temporarily pauses internal asynchronous rendering.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering even if you never call
            <see cref="M:AwesomiumSharp.WebView.Render"/>. Call this to temporarily pause rendering.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ResumeRendering">
            <summary>
            Resume rendering after a call to <see cref="M:AwesomiumSharp.WebView.PauseRendering"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:AwesomiumSharp.WebView"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:AwesomiumSharp.WebView"/> itself).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectMouseDown(AwesomiumSharp.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="mouseButton">
            The mouse button that was pressed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectMouseUp(AwesomiumSharp.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="mouseButton">
            The mouse button that was released.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollAmountHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:AwesomiumSharp.WebKeyboardEvent"/>, yourself.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.InjectKeyboardEventWin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Injects a keyboard event by translating the respective Windows Messages.
            </summary>
            <param name="msg">
            The Windows keyboard message (usually WM_KEYDOWN, WM_KEYUP and WM_CHAR). 
            </param>
            <param name="wparam">
            The first parameter of the message as intercepted by the window procedure.
            </param>
            <param name="lparam">
            The second parameter of the message as intercepted by the window procedure.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
            <remarks>
            This is usually easier to use than <see cref="M:AwesomiumSharp.WebView.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)"/>. All you have to
            do is hook into the window procedure of this view's host, intercept WM_KEYDOWN, WM_KEYUP and WM_CHAR
            and inject them to the view by using this method.
            <note type="tip">
            Beware that in WPF, only the parent Window has a window procedure. Make sure
            that you only inject messages when the actual host (if it's a child element)
            has the focus, and that you do not hook into the same procedure multiple times.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Cut">
            <summary>
            Cuts the text currently selected in this <see cref="T:AwesomiumSharp.WebView"/>, when it has keyboard focus
            (usually in a text-box), using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Copy">
            <summary>
            Copies the text currently selected in this <see cref="T:AwesomiumSharp.WebView"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this <see cref="T:AwesomiumSharp.WebView"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Paste">
            <summary>
            Pastes the text currently in the system clipboard, to this <see cref="T:AwesomiumSharp.WebView"/>,
            when it has keyboard focus (usually in a text-box).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SelectAll">
            <summary>
            Selects all content on the current page.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.GetZoomForHost(System.String)">
            <summary>
            Gets the zoom factor (percent of page) saved for a certain hostname.
            </summary>
            <param name="host">
            The hostname whose saved zoom setting will be retrieved.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ResetZoom">
            <summary>
            Resets the zoom level.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Resize(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Resizes this <see cref="T:AwesomiumSharp.WebView"/> to certain dimensions. This operation can fail
            if another resize is already pending (see <see cref="P:AwesomiumSharp.WebView.IsResizing"/>) or if
            the repaint timeout was exceeded.
            </summary>
            <param name="width">
            The width in pixels to resize to.
            </param>
            <param name="height">
            The height in pixels to resize to.
            </param>
            <param name="waitForRepaint">
            Whether or not to wait for the <see cref="T:AwesomiumSharp.WebView"/> to finish repainting to avoid flicker
            (default is true).
            </param>
            <param name="repaintTimeoutMs">
            The max amount of time to wait for a repaint, in milliseconds.
            </param>
            <returns>
            True if the resize was successful. False otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Unfocus">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Focus">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetTransparent(System.Boolean)">
            <summary>
            Sets whether or not pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
            <param name="isTransparent">
            Whether or not this <see cref="T:AwesomiumSharp.WebView"/> is transparent.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetURLFilteringMode(AwesomiumSharp.URLFilteringMode)">
            <summary>
            Sets the current URL Filtering Mode to use.
            </summary>
            <param name="filteringMode">
            The URL Filtering Mode to use. Default is <see cref="F:AwesomiumSharp.URLFilteringMode.None"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.AddURLFilter(System.String)">
            <summary>
            Adds a new URL Filter rule.
            </summary>
            <param name="filter">
            A string with optional wildcards that describes a certain URL.
            </param>
            <example>
            For example, to match all URLs from the domain "google.com", your filter string can be: http://google.com/*
            </example>
            <remarks> 
            You may also use the "local://" scheme prefix to describe the URL to the base directory
            (set via <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ClearAllURLFilters">
            <summary>
            Clears all URL Filter rules previously added with <see cref="M:AwesomiumSharp.WebView.AddURLFilter(System.String)"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Defines a new Header Definition or updates it if it already exists.
            </summary>
            <param name="name">
            The unique name of the Header Definition; this is used to refer to it later in <see cref="M:AwesomiumSharp.WebView.AddHeaderRewriteRule(System.String,System.String)"/> and related methods.
            </param>
            <param name="fields">
            A name/value collection representing field names and their respective values.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.AddHeaderRewriteRule(System.String,System.String)">
            <summary>
            Adds a new a header re-write rule. 
            All requests whose URL matches the specified rule will have its HTTP headers re-written 
            with the specified header definition before sending it to the server.
            </summary>
            <param name="rule">
            A string with optional wildcards (*, ?) that matches the URL(s) that will have their headers 
            re-written with the specified header definition.
            </param>
            <param name="name">
            The name of the header definition (specified in <see cref="M:AwesomiumSharp.WebView.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.RemoveHeaderRewriteRule(System.String)">
            <summary>
            Removes a header re-write rule previously added with <see cref="M:AwesomiumSharp.WebView.AddHeaderRewriteRule(System.String,System.String)"/>.
            </summary>
            <param name="rule">
            The rule to remove (should match the string specified in for the "rule" parameter 
            in <see cref="M:AwesomiumSharp.WebView.AddHeaderRewriteRule(System.String,System.String)"/>, exactly).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.RemoveHeaderRewriteRulesByDefinition(System.String)">
            <summary>
            Removes all header re-write rules that are using a certain header definition.
            </summary>
            <param name="name">
            The name of the header definition (specified in <see cref="M:AwesomiumSharp.WebView.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            Specify an empty string, to remove all header re-write rules.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ChooseFile(System.String)">
            <summary>
            Call this in response to a <see cref="E:AwesomiumSharp.WebView.SelectLocalFiles"/> event,
            to indicate the file to be uploaded.
            </summary>
            <param name="filePath">
            The full path to the file that was selected.
            </param>
            <remarks>
            Alternatively, if you opened a modal dialog from within your <see cref="E:AwesomiumSharp.WebView.SelectLocalFiles"/> handler,
            you can define the files to be uploaded by using the <see cref="P:AwesomiumSharp.SelectLocalFilesEventArgs.SelectedFiles"/>
            property.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Print">
            <summary>
            Prints the current page.
            </summary>
            <remarks>
            To suppress the printer selection dialog
            and print immediately using OS defaults, 
            see <see cref="M:AwesomiumSharp.WebCore.SuppressPrinterDialog(System.Boolean)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.RequestScrollData(System.String)">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:AwesomiumSharp.WebView.ScrollDataReceived"/> event.
            </remarks>
            <param name="frameName">
            The frame's scroll data to retrieve. Leave blank to get the main frame's scroll data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.Find(System.String,System.Boolean,System.Boolean)">
            <summary>
            Start finding a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:AwesomiumSharp.WebView.FindNext(System.Boolean)"/> method.
            To get actual stats about a certain query, please see <see cref="E:AwesomiumSharp.WebView.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise. The default is true.
            </param>
            <param name="caseSensitive">
            True to perform a case sensitive search. False otherwise. The default is false.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.FindNext(System.Boolean)">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <param name="forward">
            True to search forward, down the page. False otherwise. The default is true.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.StopFind(System.Boolean)">
            <summary>
            Stops the last active search (started with <see cref="M:AwesomiumSharp.WebView.Find(System.String,System.Boolean,System.Boolean)"/>).
            </summary>
            <remarks>
            This will un-highlight all matches of a previous call to <see cref="M:AwesomiumSharp.WebView.Find(System.String,System.Boolean,System.Boolean)"/>.
            </remarks>
            <param name="clearSelection">
            True to also deselect the currently selected string. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.TranslatePage(System.String,System.String)">
            <summary>
            Attempt automatic translation of the current page via Google Translate.
            </summary>
            <remarks>
            The defined language codes are ISO 639-2.
            </remarks>
            <param name="sourceLanguage">
            The language to translate from (for ex. "en" for English).
            </param>
            <param name="targetLanguage">
            The language to translate to (for ex. "fr" for French).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ActivateIME(System.Boolean)">
            <summary>
            Call this method to let the <see cref="T:AwesomiumSharp.WebView"/> know you will be passing
            text input via IME and will need to be notified of any IME-related
            events (such as caret position, user un-focusing text-box, etc.).
            </summary>
            <param name="activate">
            True to activate IME support. False otherwise.
            </param>
            <seealso cref="E:AwesomiumSharp.WebView.ImeUpdated"/>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create or update the current IME text composition.
            </summary>
            <param name="inputStr">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.ConfirmIMEComposition(System.String)">
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.CancelIMEComposition">
            <summary>
            Cancels IME text composition.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebView.OnWebSelectionChanged(System.Object,AwesomiumSharp.WebSelectionEventArgs)">
            <summary>
            Helper callback.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.IsDirtyChanged">
            <summary>
            Occurs when this <see cref="T:AwesomiumSharp.WebView"/> needs to be rendered again.
            </summary>
            <remarks>
            <para>
            This event is fired continuously while <see cref="P:AwesomiumSharp.WebView.IsDirty"/> is true and until a call 
            to <see cref="M:AwesomiumSharp.WebView.Render"/> is made that will render the updated WebView into an offscreen
            pixel buffer and clear the dirty state.
            </para>
            <para>
            This event is not automatically fired if you are running Awesomium from a non-UI
            thread. Please read the Remarks section of <see cref="M:AwesomiumSharp.WebCore.Update"/> for
            details.
            </para>
            </remarks>
        </member>
        <member name="E:AwesomiumSharp.WebView.BeginLoading">
            <summary>
            This event occurs when a <see cref="T:AwesomiumSharp.WebView"/> begins loading a new page (first bits of data received from server).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.BeginNavigation">
            <summary>
            This event occurs when a <see cref="T:AwesomiumSharp.WebView"/> begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.CursorChanged">
            <summary>
            This event occurs when the mouse cursor type changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.KeyboardFocusChanged">
            <summary>
            This event occurs when keyboard focus changes (usually as a result of a textbox being focused).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.TargetUrlChanged">
            <summary>
            This event occurs when the target URL changes (usually the result of hovering over a link).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.ToolTipChanged">
            <summary>
            This event occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.DomReady">
            <summary>
            This event occurs once the document has been parsed for a page but before all resources (images, etc.)
            have been loaded. This is your first chance to execute Javascript on a page (useful for initialization purposes).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.LoadCompleted">
            <summary>
            This event occurs once a page (and all of its sub-frames) has completely finished loading.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.PageContentsReceived">
            <summary>
            This event occurs once the page contents (as text) have been retrieved (usually after the end
            of each page load). This plain text is useful for indexing/search purposes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.OpenExternalLink">
            <summary>
            This event occurs when an external link is attempted to be opened. An external link
            is any link that normally opens in a new window (for example, links with target="_blank", calls
            to window.open(), and URL open events from Flash plugins). You are responsible for
            creating a new WebView to handle these URLs yourself.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.PluginCrashed">
            <summary>
            This event occurs whenever a plugin crashes on a page (usually Flash).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.TitleReceived">
            <summary>
            This event occurs once we receive the page title.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.Move">
            <summary>
            This event occurs whenever the window is requested to be moved (via Javascript).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.Download">
            <summary>
            This event occurs whenever a URL is requested to be downloaded (you must handle this yourself).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.Crashed">
            <summary>
            This event occurs when the renderer (which is isolated in a separate process) crashes unexpectedly.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.SelectLocalFiles">
            <summary>
            This event occurs whenever a page requests a file chooser dialog to be displayed (usually due
            to an upload form being clicked by a user). You will need to display your own dialog.
            Assign the selected local file(s) to <see cref="P:AwesomiumSharp.SelectLocalFilesEventArgs.SelectedFiles"/>
            </summary>
            <remarks>
            The dialog does not have to be modal; this request is non-blocking. Once a file has been chosen by the user,
            you can manually report this back to the view by calling <see cref="M:AwesomiumSharp.WebView.ChooseFile(System.String)"/>.
            </remarks>
        </member>
        <member name="E:AwesomiumSharp.WebView.ScrollDataReceived">
            <summary>
            This event occurs as a response to <see cref="M:AwesomiumSharp.WebView.RequestScrollData(System.String)"/>.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.JSConsoleMessageAdded">
            <summary>
            This event occurs whenever a new message is added to the Javascript Console (usually
            the result of a Javascript error).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.FindResultsReceived">
            <summary>
            This event occurs whenever we receive results back from an in-page find operation (see <see cref="M:AwesomiumSharp.WebView.Find(System.String,System.Boolean,System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.SelectionChanged">
            <summary>
            This event occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.ImeUpdated">
            <summary>
            This event occurs whenever the user does something that changes the 
            position or visibility of the IME Widget. This event is only active when 
            IME is activated (please see <see cref="M:AwesomiumSharp.WebView.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.ResourceRequest">
            <summary>
            This event occurs whenever there is a request for a certain resource (URL). You can either modify the request
            before it is sent or immediately return your own custom response. This is useful for implementing your own
            custom resource-loading back-end or for tracking of resource loads.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.WebView.ResourceResponse">
            <summary>
            This event occurs whenever a response has been received from a server. This is useful for statistics
            and resource tracking purposes.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsEnabled">
            <summary>
            Gets if the view is valid and enabled.
            </summary>
            <remarks>
            <para>
            A <see cref="T:AwesomiumSharp.WebView"/> is considered invalid when it has been destroyed 
            (by either calling <see cref="M:AwesomiumSharp.WebView.Close"/> or <see cref="M:AwesomiumSharp.WebCore.Shutdown"/>)
            or was never properly instantiated. Attempting to access members of this
            view while the value of this property is false, may cause a <see cref="T:System.InvalidOperationException"/>
            </para>
            <note>
            There is no way to revive an invalid view. When you are done with reporting any errors
            to the user, dispose it and release any references to it to avoid memory leaks.
            </note>
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsDirty">
            <summary>
            Gets whether or not this <see cref="T:AwesomiumSharp.WebView"/> needs to be rendered again.
            </summary>
            <remarks>
            Internal changes to this property fire the <see cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/>
            and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events,
            only if <see cref="P:AwesomiumSharp.WebCore.IsAutoUpdateEnabled"/> is true.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
            <seealso cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/>
            <seealso cref="M:AwesomiumSharp.WebCore.Update"/>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsResizing">
            <summary>
            Checks whether or not there is a resize operation pending.
            </summary>
            <returns>
            True if we are waiting for the <see cref="T:AwesomiumSharp.WebView"/> process to
            return acknowledgment of a pending resize operation. False otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsLoadingPage">
            <summary>
            Gets if a page is currently loading in the <see cref="T:AwesomiumSharp.WebView"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.Title">
            <summary>
            Gets the title of the page currently loaded in this <see cref="T:AwesomiumSharp.WebView"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.DirtyBounds">
            <summary>
            Gets the bounds of the area that has changed since the last call to <see cref="M:AwesomiumSharp.WebView.Render"/>.
            </summary>
            <returns>
            An <see cref="T:AwesomiumSharp.AweRect"/> representing the bounds of the area that has changed 
            since the last call to <see cref="M:AwesomiumSharp.WebView.Render"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.HistoryBackCount">
            <summary>
            Gets the available number of steps back in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.HistoryForwardCount">
            <summary>
            Gets the available number of steps forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.ToolTip">
            <summary>
            Gets the current tooltip for the element under the cursor.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.Cursor">
            <summary>
            Gets the current cursor type indicated by the <see cref="T:AwesomiumSharp.WebView"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.HasKeyboardFocus">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.WebView"/> currently has keyboard focus.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.HasTargetURL">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.WebView"/> is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.TargetURL">
            <summary>
            Gets the target URL indicated by the <see cref="T:AwesomiumSharp.WebView"/>,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsCrashed">
            <summary>
            Gets if the renderer of this <see cref="T:AwesomiumSharp.WebView"/> (which is isolated in a separate process) has crashed.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.PageContents">
            <summary>
            Gets the textual representation of the contents of the page currently loaded.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.IsDomReady">
            <summary>
            Gets if DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.WebView.FlushAlpha">
            <summary>
            Gets or sets if we should flush the alpha channel to completely opaque values, during rendering.
            The default is true.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.Selection">
            <summary>
            Gets a <see cref="P:AwesomiumSharp.WebView.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebView.Zoom">
            <summary>
            Gets or sets the zoom factor (page percentage) for the current hostname.
            Valid range is from 10% to 500%.
            </summary>
            <remarks>
            This operation is asynchronous: 
            the value may not change for several milliseconds after
            you set this property.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebView.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:AwesomiumSharp.WebView"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing the current URL presented 
            by this <see cref="T:AwesomiumSharp.WebView"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.WebView"/> instance
            (see <see cref="P:AwesomiumSharp.WebView.IsEnabled"/>).
            </exception>
            <seealso cref="M:AwesomiumSharp.WebView.LoadURL(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="T:AwesomiumSharp.CursorChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.CursorChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.CursorChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ChangeCursorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ChangeCursorEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.CursorChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.CursorChanged"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.RenderBuffer">
            <summary>
            Represents a 32-bit BGRA pixel buffer. You can save it
            directly to an image or copy it to some other graphics surface for 
            display in your application. An instance of this class is returned by
            <see cref="M:AwesomiumSharp.WebView.Render"/> and <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Render"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.CopyTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copy this buffer to a specified destination buffer.
            </summary>
            <param name="destBuffer">The destination buffer (should have same dimensions).</param>
            <param name="destRowspan"></param>
            <param name="destDepth">The depth (either 3 BPP or 4 BPP).</param>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy this buffer to a specified destination buffer.
            </summary>
            <param name="destBuffer">The destination buffer (should have same dimensions).</param>
            <param name="destRowspan">The rowspan (number of bytes per row) of the destination buffer.</param>
            <param name="destDepth">The depth (either 3 BPP or 4 BPP).</param>
            <param name="convertToRGBA">True to convert to RGBA format. False otherwise.</param>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copy this buffer to a specified destination buffer.
            </summary>
            <param name="destBuffer">The destination buffer (should have same dimensions).</param>
            <param name="destRowspan">The rowspan (number of bytes per row) of the destination buffer.</param>
            <param name="destDepth">The depth (either 3 BPP or 4 BPP).</param>
            <param name="convertToRGBA">True to convert to RGBA format. False otherwise.</param>
            <param name="flip_y">True to flip the image buffer vertically. False otherwise.</param>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.CopyToFloat(System.IntPtr)">
            <summary>
            Copy this buffer to a pixel buffer with a floating-point pixel format for use with game engines like Unity3D.
            </summary>
            <param name="destination"></param>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.CopyToBitmap(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Copy this buffer to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> that can be rendered in WPF.
            </summary>
            <param name="destination">
            The <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to write to. Must have the same dimensions.
            </param>
            <remarks>
            The <paramref name="destination"/> <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>
            must have the same dimensions to this <see cref="T:AwesomiumSharp.RenderBuffer"/>.
            </remarks>
            <exception cref="T:System.AccessViolationException">
            Attempted to write to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> with different dimensions 
            than this buffer.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.SaveToPNG(System.String,System.Boolean)">
            <summary>
            Save this buffer to a PNG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="preserveTransparency">
            True to preserve transparency (alpha) values. False otherwise.
            </param>
            <returns>
            True if the image was successfully saved. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.SaveToJPEG(System.String,System.Int32)">
            <summary>
            Save this buffer to a JPEG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="quality">
            The compression quality to use, the valid range is 0 to 100, with 100 being the highest.
            </param>
            <returns>
            True if the image was successfully saved. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.RenderBuffer.FlushAlpha">
            <summary>
            Flushes the alpha channel of this render buffer to completely opaque values.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.RenderBuffer.Width">
            <summary>
            The width, in pixels.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.RenderBuffer.Height">
            <summary>
            The height, in pixels.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.RenderBuffer.Rowspan">
            <summary>
            The number of bytes per row (this is usually width * 4 but can be different).
            </summary>
        </member>
        <member name="P:AwesomiumSharp.RenderBuffer.Buffer">
            <summary>
            The raw block of pixel data, BGRA format. 
            </summary>
            <remarks>
            If <see cref="M:AwesomiumSharp.WebView.SetTransparent(System.Boolean)"/> is not enabled, you may need to flush the alpha
            channel of this buffer before displaying it. This is because Flash on Windows will 
            sometimes corrupt our alpha channel and so you may see weird text in Flash if you forget to do this.
            To flash the alpha channel, use: <see cref="M:AwesomiumSharp.RenderBuffer.FlushAlpha"/>.
            </remarks>
        </member>
        <member name="T:AwesomiumSharp.PluginCrashedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.PluginCrashed"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PluginCrashed"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.PluginCrashedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.PluginCrashedEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.PluginCrashed"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PluginCrashed"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ResourceRequest">
            <summary>
            Represents a request for a URL resource. 
            You can get information about the request or modify it (change GET to POST, modify headers, etc.).
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ResourceRequest.AppendExtraHeader(System.String,System.String)">
            <summary>
            Appends a new header to this request.
            </summary>
            <param name="name">The name of the header to append.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:AwesomiumSharp.ResourceRequest.GetUploadElement(System.UInt32)">
            <summary>
            Get a certain upload element (returned instance is owned by this class).
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:AwesomiumSharp.ResourceRequest.ClearUploadElements">
            <summary>
            Clear all upload elements.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ResourceRequest.AppendUploadFilePath(System.String)">
            <summary>
            Append a file for POST data (adds a new <see cref="T:AwesomiumSharp.UploadElement"/>)	
            </summary>
            <param name="filePath">
            The path to the file.
            </param>
        </member>
        <member name="M:AwesomiumSharp.ResourceRequest.AppendUploadBytes(System.String)">
            <summary>
            Append a string of bytes for POST data (adds a new <see cref="T:AwesomiumSharp.UploadElement"/>).
            </summary>
            <param name="bytes">The string to append.</param>
        </member>
        <member name="P:AwesomiumSharp.ResourceRequest.Url">
            <summary>
            Gets the URL associated with this request.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.ResourceRequest.Method">
            <summary>
            Gets or sets the method for the request (usually "GET" or "POST").
            </summary>
        </member>
        <member name="P:AwesomiumSharp.ResourceRequest.Referrer">
            <summary>
            Gets the referrer.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.ResourceRequest.ExtraHeaders">
            <summary>
            Gets or sets the extra headers for the request. Each header is delimited by /r/n (CRLF)
            Headers should NOT end in /r/n (CRLF).
            </summary>
        </member>
        <member name="P:AwesomiumSharp.ResourceRequest.UploadElementsCount">
            <summary>
            Gets the number of upload elements (essentially, batches of POST data).
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ScrollDataReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.ScrollDataReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ScrollDataReceived"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ScrollDataEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ScrollData">
            <summary>
            Contains the page dimensions and scroll position of the page.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ScrollData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.ScrollData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AwesomiumSharp.ScrollDataEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.ScrollDataReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ScrollDataReceived"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ResourceResponseEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.ResourceResponse"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceResponse"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ResourceResponseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ResourceResponseEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.ResourceResponse"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceResponse"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.UrlEventHandler">
            <summary>
            Represents the method that will handle events that provide a URL.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.UrlEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.KeyboardFocusChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.KeyboardFocusChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.KeyboardFocusChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ChangeKeyboardFocusEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ChangeKeyboardFocusEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.KeyboardFocusChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.KeyboardFocusChanged"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.MoveEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.Move"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.Move"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.MoveEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.MoveEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.Move"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.Move"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.JSCallback">
            <summary>
            Represents the callback that is invoked when the respective function of a Javascript object previously created with
            <see cref="M:AwesomiumSharp.WebView.CreateObject(System.String)"/>, is called from Javascript.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.JSCallbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.JSCallbackEventArgs">
            <summary>
            Provides data to a <see cref="T:AwesomiumSharp.JSCallback"/> callback.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.Windows.Controls.WebControlCommands">
            <summary>
            Defines routed commands that are common to a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.LoadURL">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL as a command parameter.
            The URL can be a <see cref="T:System.Uri"/> instance or a string representing the source URL.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.LoadFile">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadFile(System.String,System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the file name as a command parameter.
            The file name can be represented by a <see cref="T:System.Uri"/> instance or a string.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.ActivateIME">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ActivateIME(System.Boolean)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify a boolean value as a command parameter,
            that indicates whether to activate or deactivate IME.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.AddURLFilter">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.AddURLFilter(System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL filter (as a string), as a command parameter.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.CancelIMEComposition">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CancelIMEComposition"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.ChooseFile">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ChooseFile(System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the chosen file name(s) as a command parameter.
            The specified value can be an array of <see cref="T:System.String"/> when you have selected multiple files,
            or a single string for a single file. The value of <see cref="P:AwesomiumSharp.SelectLocalFilesEventArgs.SelectMultipleFiles"/>
            provided by the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> event, indicates if you should
            specify one or multiple files. You can always specify an array of <see cref="T:System.String"/>
            containing a single string, for all scenarios.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.ClearAllURLFilters">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ClearAllURLFilters"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.ConfirmIMEComposition">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ConfirmIMEComposition(System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the string to examine, as a command parameter.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.CreateObject">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CreateObject(System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to create, as a command parameter.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.DestroyObject">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.DestroyObject(System.String)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to destroy, as a command parameter.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.ResetZoom">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ResetZoom"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.StopFind">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.StopFind(System.Boolean)"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.CopyHTML">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CopyHTML"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControlCommands.CopyLinkAddress">
            <summary>
            Gets a command that invokes <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CopyLinkAddress"/> when targeting a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.WebCoreConfig">
            <summary>
            Configuration settings for the <see cref="T:AwesomiumSharp.WebCore"/>.
            Used in <see cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebCoreConfig.Default">
            <summary>
            Singleton with default configuration settings.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.WebCoreConfig.#ctor">
            <summary>
            Creates an instance of <see cref="T:AwesomiumSharp.WebCoreConfig"/>
            initialized with default configuration settings.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.EnablePlugins">
            <summary>
            Indicates whether or not to enable embedded plugins (e.g., Flash).
            The default is false.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.EnableJavascript">
            <summary>
            Indicates whether or not Javascript is enabled. The default is True.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.EnableDatabases">
            <summary>
            Indicates whether or not local HTML5 databases are enabled. (Will create a 
            databases folder in the user data path if this is enabled). The default is false.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.UserDataPath">
            <summary>
            Indicates the path to the directory that will be used to store cache, cookies, and other data. 
            If an empty string is specified, this path defaults to "./Default".
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.PluginPath">
            <summary>
            Indicates an absolute path that will be included in the search for plugins. 
            This is useful if you wish to bundle certain plugins with your application.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.LogPath">
            <summary>
            Indicates the path to store the awesomium.log. 
            If none is specified, the log will be stored in the working directory.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.LogLevel">
            <summary>
            Indicates the logging level to use, this can be either <see cref="F:AwesomiumSharp.LogLevel.None"/>, 
            <see cref="F:AwesomiumSharp.LogLevel.Normal"/>, or <see cref="F:AwesomiumSharp.LogLevel.Verbose"/>.
            The default is <see cref="F:AwesomiumSharp.LogLevel.Normal"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.ForceSingleProcess">
            <summary>
            Indicates whether or not all WebViews and should be forced to render inside
            the main process (we typically launch a separate child-process to
            render each WebView and plugin safely).
            <p/>
            This mode currently only works
            on Windows and automatically disables plugins and local databases.
            The default is false.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.UserAgentOverride">
            <summary>
            Indicates the user agent string that will be used to override the default. 
            Leave this empty to use the default user agent.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.ProxyServer">
            <summary>
            Indicates the proxy settings for all network requests. 
            Specify "none" to disable all proxy use, specify "auto" to attempt to detect the proxy using system settings 
            (e.g., via the Internet Properties dialog on Windows or the Network panel of System Preferences on Mac OSX). 
            Specify anything else to set manual proxy settings.
            </summary>
            <example>
            Possible values can be:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><c>"none"</c></term>
            <description>No proxy. (<b>Default</b>).</description>
            </item>
            <item>
            <term><c>"auto"</c></term>
            <description>Detect system proxy settings.</description>
            </item>
            <item>
            <term><c>"http=myproxy:80;ftp=myproxy2"</c></term>
            <description>
            Use HTTP proxy "myproxy:80" for http:// URLs, and HTTP proxy 
            "myproxy2:80" for ftp:// URLs.
            </description>
            </item>
            <item>
            <term><c>"myproxy:80"</c></term>
            <description>Use HTTP proxy "foopy:80" for all URLs.</description>
            </item>
            <item>
            <term><c>"socks4://myproxy"</c></term>
            <description>Use SOCKS v4 proxy "foopy:1080" for all URLs.</description>
            </item>
            </list>
            </example>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.ProxyConfigScript">
            <summary>
            Indicates the URL to the PAC (Proxy Auto-Config) Script to use. See http://en.wikipedia.org/wiki/Proxy_auto-config for more info.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.AuthServerWhitelist">
            <summary>
            Gets or sets the list of servers that Integrated Authentication is allowed to silently provide user credentials for, when challenged.
            </summary>
            <remarks>
            Integrated Authentication can authenticate the user to an Intranet server or proxy without prompting the user for a username or password. 
            It does this by using cached credentials which are established when the user initially logs in to the machine that Awesomium is running on. 
            Integrated Authentication is supported for Negotiate and NTLM challenges only.
            <p/>
            <note>
            In Windows only, if you do not set this property, the permitted list consists of those servers in the Local Machine or 
            Local Intranet security zone (for example, when the host in the URL includes a "." character it is outside the Local Intranet security zone), 
            which is the behavior present in IE.
            </note>
            </remarks>
            <example>
            The list is set using a comma-separated string of URLs. For example, you can specify:
            <code>
            config.AuthServerWhitelist = "*example.com,*foobar.com,*baz";
            </code>
            which would tell Awesomium that any URL ending in either 'example.com', 'foobar.com' or 'baz' is in the permitted list.
            Without the '*' prefix, the URL has to match exactly.
            </example>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.SaveCacheAndCookies">
            <summary>
            Indicates whether or not cache and cookies should be saved to disk.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.MaxCacheSize">
            <summary>
            Indicates the maximum disk space to be used by the disk cache, in bytes. Specify 0 to use no limit.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.DisableSameOriginPolicy">
            <summary>
            Indicates whether or not the "same-origin" policy should be disabled. 
            See http://en.wikipedia.org/wiki/Same_origin_policy.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.DisableWinMessagePump">
            <summary>
            Indicates whether or not we should automatically pump Windows messages during
            a call to <see cref="M:AwesomiumSharp.WebCore.Update"/>. You may wish to set this to true if you are already
            pumping messages (Peek/Dispatch). Default is false.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.CustomCSS">
            <summary>
            Indicates a string of custom CSS to be included as the global default style for all pages. 
            This is especially useful for customizing scrollbars and other look-and-feel elements.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.AutoUpdatePeriod">
            <summary>
            Indicates the time interval between invocations of WebCore's update, in milliseconds.
            The default is 20.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.HomeURL">
            <summary>
            Gets or sets the URL that will be used as the Home URL
            for <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>s.
            </summary>
            <remarks>
            This setting is used by <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>s to automatically
            handle the <see cref="P:System.Windows.Input.NavigationCommands.BrowseHome"/> command.
            The default is: "about:blank".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference or an empty string defined.
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebCoreConfig.EnableVisualStyles">
            <summary>
            Gets or sets if default Windows visual styles should be applied to common dialogs shown by views.
            Default is true.
            </summary>
            <remarks>
            Currently, this is used to apply visual styles to the Print dialog.
            </remarks>
        </member>
        <member name="T:AwesomiumSharp.JSObject">
            <summary>
            Represents an Object type in Javascript (similar to a Dictionary in C#).
            You can get and set properties (key/value pairs).
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSObject.#ctor">
            <summary>
            Creates an instance of <see cref="T:AwesomiumSharp.JSObject"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSObject.Dispose">
            <summary>
            Disposes and destroys this object.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSObject.HasProperty(System.String)">
            <summary>
            Gets if this object has a certain named property.
            </summary>
            <param name="propertyName">
            The name of the property to search for.
            </param>
            <returns>
            True if this object has the specified named property. 
            False otherwise.
            </returns>
        </member>
        <member name="P:AwesomiumSharp.JSObject.IsDisposed">
            <summary>
            Indicates if this object is already disposed and destroyed.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.JSObject.Property(System.String)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            </param>
            <returns>
            A <see cref="T:AwesomiumSharp.JSValue"/> representing the value of the specified named property.
            </returns>
        </member>
        <member name="P:AwesomiumSharp.JSObject.Keys">
            <summary>
            Gets an array of keys representing the available named properties of this <see cref="T:AwesomiumSharp.JSObject"/>.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.OpenExternalLinkEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.OpenExternalLink"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.OpenExternalLink"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.OpenExternalLinkEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.OpenExternalLinkEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.OpenExternalLink"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.OpenExternalLink"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.Windows.Forms.Utilities">
            <summary>
            Utility class providing helper methods that can be used by Windows Forms applications.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Forms.Utilities.GetCursor(AwesomiumSharp.CursorType)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:AwesomiumSharp.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:AwesomiumSharp.WebView.CursorChanged"/> event.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:AwesomiumSharp.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Forms.Utilities.GetKeyboardEvent(AwesomiumSharp.WebKeyType,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:AwesomiumSharp.WebKeyboardEvent"/> equivalent of a Windows Forms key-down or key-up event.
            </summary>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <param name="e">
            The Windows Forms key-down or key-up event arguments.
            </param>
            <returns>
            An instance of a <see cref="T:AwesomiumSharp.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-down or key-up event.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:AwesomiumSharp.WebKeyboardEvent"/> equivalent of a Windows Forms key-press event.
            </summary>
            <param name="e">
            The Windows Forms key-press event arguments.
            </param>
            <returns>
            An instance of a <see cref="T:AwesomiumSharp.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-press event.
            </returns>
        </member>
        <member name="T:AwesomiumSharp.SelectionHelper">
            <summary>
            This helper class is temporarily added, until we get a native way to access
            current selection changes and properties.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.SelectionHelper.RegisterSelectionHelper">
            <summary>
            Must be called once when the view is created.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.SelectionHelper.InjectSelectionHandlers">
            <summary>
            Must be called every time a new page is being loaded, at DOM ready time.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.SelectionHelper.ClearSelection">
            <summary>
            Informs listeners of an empty selection.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.SelectionHelper.OnTextSelectionChanged(System.Object,AwesomiumSharp.JSCallbackEventArgs)">
            <summary>
            Plain text callback.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.SelectionHelper.OnHTMLSelectionChanged(System.Object,AwesomiumSharp.JSCallbackEventArgs)">
            <summary>
            HTML text callback.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.SelectionHelper.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.JSValueType">
            <summary>
            Indicates the Javascript data type that a <see cref="T:AwesomiumSharp.JSValue"/> represents.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.JSValue">
            <summary>
            Represents a Javascript value. It can be initialized from and to several types: 
            boolean, integer, double, string, object, and array.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> representing a null value.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(System.Boolean)">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> initialized with a boolean.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> initialized with an integer.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> initialized with a double.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> initialized with a string.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(AwesomiumSharp.JSObject)">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> initialized with a <see cref="T:AwesomiumSharp.JSObject"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.#ctor(AwesomiumSharp.JSValue[])">
            <summary>
            Creates a <see cref="T:AwesomiumSharp.JSValue"/> representing an array of <see cref="T:AwesomiumSharp.JSValue"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.ToString">
            <summary>
            Returns this <see cref="T:AwesomiumSharp.JSValue"/> as a wide string (converting if necessary). 
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.ToInteger">
            <summary>
            Returns this <see cref="T:AwesomiumSharp.JSValue"/> as an integer (converting if necessary). 
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.ToDouble">
            <summary>
            Returns this <see cref="T:AwesomiumSharp.JSValue"/> as a double (converting if necessary). 
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.ToBoolean">
            <summary>
            Returns this <see cref="T:AwesomiumSharp.JSValue"/> as a boolean (converting if necessary). 
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.GetArray">
            <summary>
            Gets this value as an Array, this will assert if not an Array type.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.GetObject">
            <summary>
            Gets this value as an Object, this will assert if not an Object type.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.JSValue.Dispose">
            <summary>
            Disposes and destroys this <see cref="T:AwesomiumSharp.JSValue"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.JSValue.Type">
            <summary>
            Gets the data type that this <see cref="T:AwesomiumSharp.JSValue"/> represents.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.UploadElement">
            <summary>
            Represents a batch of "upload" data sent along with the <see cref="T:AwesomiumSharp.ResourceRequest"/>. 
            This data is usually sent with a POST request.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.UploadElement.GetBytes">
            <summary>
            Gets the string of bytes associated with this <see cref="T:AwesomiumSharp.UploadElement"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.UploadElement.GetFilePath">
            <summary>
            Get the file path associated with this <see cref="T:AwesomiumSharp.UploadElement"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.UploadElement.IsFilePath">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.UploadElement"/> is a file.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.UploadElement.IsBytes">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.UploadElement"/> is a string of bytes.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.ResourceResponse">
            <summary>
            This class allows you to override the response for a certain <see cref="T:AwesomiumSharp.ResourceRequest"/>.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.ResourceResponse.#ctor(System.Byte[],System.String)">
            <summary>
            Creates an instance of <see cref="T:AwesomiumSharp.ResourceResponse"/> from a byte array.
            </summary>
            <param name="data">The data to be initialized from (a copy is made).</param>
            <param name="mimeType">The mime-type of the data (for ex. "text/html").</param>
        </member>
        <member name="M:AwesomiumSharp.ResourceResponse.#ctor(System.String)">
            <summary>
            Create a ResourceResponse from a file on disk.
            </summary>
            <param name="filePath">
            The path to the file containing the response data.
            </param>
        </member>
        <member name="T:AwesomiumSharp.ToolTipChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.ToolTipChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ToolTipChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ChangeToolTipEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ChangeToolTipEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.ToolTipChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ToolTipChanged"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.SelectLocalFilesEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.SelectLocalFiles"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.SelectLocalFilesEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.SelectLocalFilesEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.SelectLocalFiles"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.TitleReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.TitleReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.TitleReceived"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.ReceiveTitleEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.ReceiveTitleEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.TitleReceived"/> and <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.TitleReceived"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.PageContentsReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.PageContentsReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PageContentsReceived"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.GetPageContentsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.GetPageContentsEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.PageContentsReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PageContentsReceived"/> events.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.ShiftKey">
            <summary>
            Whether or not a Shift key is down.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.ControlKey">
            <summary>
            Whether or not a Control key is down.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.AltKey">
            <summary>
            Whether or not an ALT key is down.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.MetaKey">
            <summary>
            Whether or not a meta key (Command-key on Mac, Windows-key on Windows) is down.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.IsKeypad">
            <summary>
            Whether or not the key pressed is on the keypad.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyModifiers.IsAutoRepeat">
            <summary>
            Whether or not the character input is the result of an auto-repeat timer.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.WebKeyboardEvent">
            <summary>
            Represents a generic keyboard event that can be created from a platform-specific event or 
            synthesized from a virtual event. Used by <see cref="M:AwesomiumSharp.WebView.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)"/> and
            <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)"/>.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.Type">
            <summary>
            The type of this <see cref="T:AwesomiumSharp.WebKeyboardEvent"/>.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.Modifiers">
            <summary>
            The current state of the keyboard. Modifiers may be OR'd together to represent multiple values.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.VirtualKeyCode">
            <summary>
            The virtual key-code associated with this keyboard event. 
            This is either directly from the event (ie, WPARAM on Windows) or via a mapping function.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.NativeKeyCode">
            <summary>
            The actual key-code generated by the platform. The DOM specification primarily uses 
            Windows-equivalent codes (hence virtualKeyCode above) but it helps to additionally 
            specify the platform-specific key-code as well.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.Text">
            <summary>
            The actual text generated by this keyboard event. 
            This is usually only a single character but we're generous and cap it at a max of 4 characters.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.UnmodifiedText">
            <summary>
            The text generated by this keyboard event before all modifiers except shift are applied. 
            This is used internally for working out shortcut keys. 
            This is usually only a single character but we're generous and cap it at a max of 4 characters.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.WebKeyboardEvent.IsSystemKey">
            <summary>
            Whether or not the pressed key is a "system key". 
            This is a Windows-only concept and should be "false" for all non-Windows platforms. 
            For more information, see the following link: http://msdn.microsoft.com/en-us/library/ms646286.aspx
            </summary>
        </member>
        <member name="T:AwesomiumSharp.AweRect">
            <summary>
            A simple rectangle class. Used with <see cref="P:AwesomiumSharp.WebView.DirtyBounds"/>, <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.DirtyBounds"/>
            and various <see cref="T:AwesomiumSharp.RenderBuffer"/> methods.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.WebCore">
            <summary>
            The WebCore is the "core" of Awesomium; it manages the lifetime of all views
            (see <see cref="T:AwesomiumSharp.WebView"/> and <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>) and maintains useful services
            like resource caching and network connections.
            </summary>
            <remarks>
            Generally, you should initialize the WebCore (<see cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>) providing
            your custom configuration, before creating any views and shut it down (<see cref="M:AwesomiumSharp.WebCore.Shutdown"/>)
            at the end of your program.
            <p/>
            <note>
            If you do not initialize <see cref="T:AwesomiumSharp.WebCore"/>, the core will automatically
            start, using default configuration, when you create the first view by either calling
            <see cref="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)"/> or by instantiating a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </note>
            <p/>
            <note type="caution">
            Do not call any of the members of this class (other than <see cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>
            or <see cref="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)"/>) before starting the core.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:AwesomiumSharp.WebCore.CheckAccess">
            <summary>
            Checks thread affinity.
            </summary>
            <returns>
            True if called on the correct thread. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)">
            <summary>
            Initializes the <see cref="T:AwesomiumSharp.WebCore"/> singleton with certain configuration settings.
            </summary>
            <param name="config">
            An instance of <see cref="T:AwesomiumSharp.WebCoreConfig"/> specifying configuration settings.
            </param>
            <param name="start">
            True if the <see cref="T:AwesomiumSharp.WebCore"/> should immediately start. False to perform lazy instantiation.
            The <see cref="T:AwesomiumSharp.WebCore"/> will start when the first view (<see cref="T:AwesomiumSharp.WebView"/> or <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>)
            is created. The default is true.
            </param>
            <remarks>
            <para>
            If you do not call this method, the <see cref="T:AwesomiumSharp.WebCore"/> will start automatically,
            using default configuration settings, when you first create a view through <see cref="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)"/>
            or by instantiating a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </para>
            <note>
            If you are not sure if <see cref="T:AwesomiumSharp.WebCore"/> is running, check <see cref="P:AwesomiumSharp.WebCore.IsRunning"/>
            before calling this method. If <see cref="T:AwesomiumSharp.WebCore"/> is running, you will have
            to shut it down (see <see cref="M:AwesomiumSharp.WebCore.Shutdown"/>) and <b>restart the hosting application</b> before 
            initializing <see cref="T:AwesomiumSharp.WebCore"/> again. Only a single initialization/instantiation of the 
            <see cref="T:AwesomiumSharp.WebCore"/> is possible per application session (process).
            </note>
            <para>
            If you set <see cref="P:AwesomiumSharp.WebCoreConfig.SaveCacheAndCookies"/> to true, 
            please make sure that your hosting application is a single instance application, 
            unless you are sure that you provide a unique <see cref="P:AwesomiumSharp.WebCoreConfig.UserDataPath"/>
            for each of your application's instances.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called while <see cref="T:AwesomiumSharp.WebCore"/> is running.
            </exception>
            <seealso cref="P:AwesomiumSharp.WebCore.IsRunning"/>
        </member>
        <member name="M:AwesomiumSharp.WebCore.Shutdown">
            <summary>
            Destroys the <see cref="T:AwesomiumSharp.WebCore"/> and any lingering <see cref="T:AwesomiumSharp.WebView"/>
            and <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instances.
            </summary>
            <remarks>
            Make sure that this is not called while the hosting UI of any views
            created by this <see cref="T:AwesomiumSharp.WebCore"/>, is still live and visible. 
            This method will destroy all views created by this <see cref="T:AwesomiumSharp.WebCore"/>.
            Any attempt to access them or any member of this class (other than <see cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>
            and <see cref="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)"/>) after calling this method,
            may throw a <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.WebCore.Update">
            <summary>
            Updates the <see cref="T:AwesomiumSharp.WebCore"/> and allows it to conduct various operations such
            as updating the render buffer of each view, destroying any views that are queued for destruction,
            and invoking any queued events (including <see cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/>).
            </summary>
            <remarks>
            If you are using Awesomium from a UI thread (regular use), you never need to call this method.
            Internal auto-update takes care of this and you only need to watch for the <see cref="E:AwesomiumSharp.WebView.IsDirtyChanged"/>
            or <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/> events. If you are using Awesomium from a
            non graphical environment (Console application, Service or non-UI thread), auto-update is not available and
            you must manually call this method from either your application's message loop or by creating a timer. 
            In this case, you must make sure that any calls to any of the classes of this assembly,
            are made from the same thread.
            <note>
            You can check <see cref="P:AwesomiumSharp.WebCore.IsAutoUpdateEnabled"/> to know if auto-update is already enabled.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
            <exception cref="T:System.AccessViolationException">
            You attempted to access the member from a thread other than
            thread where <see cref="T:AwesomiumSharp.WebCore"/> was created.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)">
            <summary>
            Sets the base directory all of your local assets.
            </summary>
            <param name="baseDirPath">
            The absolute path to your base directory. The base directory is a location that holds all of your local assets.
            It will be used with <see cref="M:AwesomiumSharp.WebView.LoadHTML(System.String,System.String)"/>, <see cref="M:AwesomiumSharp.WebView.LoadFile(System.String,System.String)"/>, 
            <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadHTML(System.String,System.String)"/> and <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadFile(System.String,System.String)"/>
            to resolve relative URLs.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:AwesomiumSharp.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="viewSource">
            Enable View-Source mode on this <see cref="T:AwesomiumSharp.WebView"/> to view 
            the HTML source of any web-page (must be loaded via <see cref="M:AwesomiumSharp.WebView.LoadURL(System.String,System.String,System.String,System.String)"/>).
            </param>
            <returns>
            A new <see cref="T:AwesomiumSharp.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:AwesomiumSharp.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.WebCore.SetCustomResponsePage(System.Int32,System.String)">
            <summary>
            Sets a custom response page to use when a WebView encounters a certain HTML status code from the server (like '404 - File not found').
            </summary>
            <param name="statusCode">
            The status code this response page should be associated with. See http://en.wikipedia.org/wiki/List_of_HTTP_status_codes.
            </param>
            <param name="filePath">
            The local page to load as a response, should be a path relative to the base directory.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.ClearCache">
            <summary>
            Clears the disk cache and media cache.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.ClearCookies">
            <summary>
            Clears all stored cookies.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.SetCookie(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets a cookie for a certain URL.
            </summary>
            <param name="url">
            The URL to set the cookie on.
            </param>
            <param name="cookieString">
            The cookie string, for example:
            <c>
            "key1=value1; key2=value2"
            </c>
            </param>
            <param name="isHttpOnly">
            Whether or not this cookie is HTTP-only.
            </param>
            <param name="forceSessionCookie">
            Whether or not to force this as a session cookie.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.GetCookies(System.String,System.Boolean)">
            <summary>
            Gets all cookies for a certain URL.
            </summary>
            <param name="url">
            The URL whose cookies will be retrieved.
            </param>
            <param name="excludeHttpOnly">
            Whether or not to exclude HTTP-only cookies from the result.
            </param>
            <returns>
            A <see cref="T:System.String"/> representing the cookie.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.DeleteCookie(System.String,System.String)">
            <summary>
            Deletes a certain cookie on a certain URL.
            </summary>
            <param name="url">
            The URL that we will be deleting cookies on.
            </param>
            <param name="cookieName">
            The name of the cookie that will be deleted.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="M:AwesomiumSharp.WebCore.SuppressPrinterDialog(System.Boolean)">
            <summary>
            Set whether or not the printer dialog should be suppressed or not.
            Set this to true to hide printer dialogs and print immediately
            using the OS's default printer when <see cref="M:AwesomiumSharp.WebView.Print"/> or
            <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Print"/> is called.
            The default is false is you never call this.
            </summary>
            <param name="suppress">
            True to suppress the dialog. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebCore.PluginsEnabled">
            <summary>
            Gets if plugins are enabled.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebCore.BaseDirectory">
            <summary>
            Gets or sets the base directory (used with <see cref="M:AwesomiumSharp.WebView.LoadHTML(System.String,System.String)"/>)
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebCore.IsRunning">
            <summary>
            Gets if the <see cref="T:AwesomiumSharp.WebCore"/> is currently running.
            </summary>
            <seealso cref="M:AwesomiumSharp.WebCore.Initialize(AwesomiumSharp.WebCoreConfig,System.Boolean)"/>
        </member>
        <member name="P:AwesomiumSharp.WebCore.IsShuttingDown">
            <summary>
            Gets if the WebCore is currently shutting down.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.WebCore.IsAutoUpdateEnabled">
            <summary>
            Gets if automatic update is successfully enabled.
            </summary>
            <seealso cref="M:AwesomiumSharp.WebCore.Update"/>
        </member>
        <member name="P:AwesomiumSharp.WebCore.AutoUpdatePeriod">
            <summary>
            Gets or sets the time interval between invocations of <see cref="M:AwesomiumSharp.WebCore.Update"/>, in milliseconds.
            The default is 20.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="P:AwesomiumSharp.WebCore.HomeURL">
            <summary>
            Gets or sets the URL that will be used as the Home URL
            for <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>s.
            </summary>
            <remarks>
            This setting is used by <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>s to automatically
            handle the <see cref="P:System.Windows.Input.NavigationCommands.BrowseHome"/> command.
            The default is: "about:blank".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference or an empty string defined.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this before starting <see cref="T:AwesomiumSharp.WebCore"/>.
            </exception>
        </member>
        <member name="T:AwesomiumSharp.Windows.Controls.WebControl">
            <summary>
            Represents a WPF control that wraps an Awesomium web view.
            You can use it to embed Awesomium directly in your WPF application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface, through XAML or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:AwesomiumSharp.WebCore"/>.
            WebControl takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. <see cref="T:AwesomiumSharp.WebCore"/> and the underlying web view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.UIElement.IsEnabled"/> Property</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property has a special
            meaning in <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>: it also indicates if the underlying view is valid and enabled.
            <p/>
            A <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> is considered invalid when it has been destroyed 
            (by either calling <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Close"/> or <see cref="M:AwesomiumSharp.WebCore.Shutdown"/>)
            or was never properly instantiated.
            <p/>
            Manually setting the <see cref="P:System.Windows.UIElement.IsEnabled"/> property to true, will temporarily render 
            the control disabled.
            <p/>
            <note type="inherit">
            Inheritors should rely on the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/> property. Accessing <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/> also 
            updates the value of <see cref="P:System.Windows.UIElement.IsEnabled"/>.
            </note>
            <p/>
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsCrashed"/>.
            </note>
            <p/>
            <note type="caution">
            While disabled (either because the view is destroyed or because you manually set this property)
            attempting to access members of this control, may cause a <see cref="T:System.InvalidOperationException"/>
            (see the documentation of each member).
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>
            <seealso cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsCrashed"/>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnIsDirtyChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnBeginLoading(System.Object,AwesomiumSharp.BeginLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginLoading"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnBeginNavigation(System.Object,AwesomiumSharp.BeginNavigationEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnCursorChanged(System.Object,AwesomiumSharp.ChangeCursorEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnKeyboardFocusChanged(System.Object,AwesomiumSharp.ChangeKeyboardFocusEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.KeyboardFocusChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnTargetUrlChanged(System.Object,AwesomiumSharp.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.TargetUrlChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnToolTipChanged(System.Object,AwesomiumSharp.ChangeToolTipEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnDomReady(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.DomReady"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnLoadCompleted(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.LoadCompleted"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPageContentsReceived(System.Object,AwesomiumSharp.GetPageContentsEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PageContentsReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnOpenExternalLink(System.Object,AwesomiumSharp.OpenExternalLinkEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.OpenExternalLink"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPluginCrashed(System.Object,AwesomiumSharp.PluginCrashedEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.PluginCrashed"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnTitleReceived(System.Object,AwesomiumSharp.ReceiveTitleEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.TitleReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnMove(System.Object,AwesomiumSharp.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.Move"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnDownload(System.Object,AwesomiumSharp.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.Download"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnCrashed(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnSelectLocalFiles(System.Object,AwesomiumSharp.SelectLocalFilesEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnScrollDataReceived(System.Object,AwesomiumSharp.ScrollDataEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ScrollDataReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnJSConsoleMessageAdded(System.Object,AwesomiumSharp.JSConsoleMessageEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.JSConsoleMessageAdded"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnFindResultsReceived(System.Object,AwesomiumSharp.GetFindResultsEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.FindResultsReceived"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnSelectionChanged(System.Object,AwesomiumSharp.WebSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnImeUpdated(System.Object,AwesomiumSharp.UpdateImeEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ImeUpdated"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnResourceRequest(System.Object,AwesomiumSharp.ResourceRequestEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceRequest"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnResourceResponse(System.Object,AwesomiumSharp.ResourceResponseEventArgs)">
            <summary>
            Raises the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceResponse"/> event.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.#ctor">
            <summary>
            Creates and initializes an instance of <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> and its underlying web view.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Close">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GetVisualChild(System.Int32)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnLostFocus(System.Windows.RoutedEventArgs)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.MeasureOverride(System.Windows.Size)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ArrangeOverride(System.Windows.Size)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnRender(System.Windows.Media.DrawingContext)">
            @internal
            <inheritdoc />
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.VerifyLive">
            @} 
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Render">
            <summary>
            Renders this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> into an offscreen pixel buffer and clears the dirty state.
            </summary>
            <remarks>
            For maximum efficiency, you should only call this when the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> is dirty 
            (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsDirty"/>).
            The most appropriate time to call this method, is from within your <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/> handler.
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
            <returns>
            An instance of the <see cref="T:AwesomiumSharp.RenderBuffer"/> that this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> was rendered to. 
            This value may change between renders and may return null if the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> has crashed
            (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsCrashed"/>).
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.PauseRendering">
            <summary>
            Temporarily pauses internal asynchronous rendering.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering even if you never call
            <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Render"/>. Call this to temporarily pause rendering.
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ResumeRendering">
            <summary>
            Resume rendering after a call to <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.PauseRendering"/>.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectMouseDown(AwesomiumSharp.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="mouseButton">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectMouseUp(AwesomiumSharp.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="mouseButton">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollAmountHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:AwesomiumSharp.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.InjectKeyboardEventWin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Injects a keyboard event by translating the respective Windows Messages.
            </summary>
            <param name="msg">
            The Windows keyboard message (usually <c>WM_KEYDOWN</c>, <c>WM_KEYUP</c> and <c>WM_CHAR</c>). 
            </param>
            <param name="wparam">
            The first parameter of the message as intercepted by the window procedure.
            </param>
            <param name="lparam">
            The second parameter of the message as intercepted by the window procedure.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
            <remarks>
            This is usually easier to use than <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.InjectKeyboardEvent(AwesomiumSharp.WebKeyboardEvent)"/>. All you have to
            do is hook into the window procedure of this view's host, intercept <c>WM_KEYDOWN</c>, 
            <c>WM_KEYUP</c> and <c>WM_CHAR</c> and inject them to the view by using this method.
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="tip">
            Beware that in WPF, only the parent Window has a window procedure. Make sure
            that you only inject messages when the actual host (if it's a child element)
            has the focus, and that you do not hook into the same procedure multiple times.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Resize(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Resizes this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> to certain dimensions. This operation can fail
            if another resize is already pending (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsResizing"/>) or if
            the repaint timeout was exceeded.
            </summary>
            <param name="width">
            The width in pixels to resize to.
            </param>
            <param name="height">
            The height in pixels to resize to.
            </param>
            <param name="waitForRepaint">
            Whether or not to wait for the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> to finish repainting to avoid flicker
            (default is true).
            </param>
            <param name="repaintTimeoutMs">
            The max amount of time to wait for a repaint, in milliseconds.
            </param>
            <returns>
            True if the resize was successful. False otherwise.
            </returns>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:AwesomiumSharp.WebCore.HomeURL"/>.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)">
            <summary>
            Loads a URL into the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <param name="username">
            If the URL requires authentication, the username to authorize as, otherwise just pass an empty string.
            </param>
            <param name="password">
            If the URL requires authentication, the password to use, otherwise just pass an empty string.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.LoadHTML(System.String,System.String)">
            <summary>
            Loads a string of HTML into the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <param name="frameName">
            The name of the frame to load the HTML in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>.
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.LoadFile(System.String,System.String)">
            <summary>
            Loads a local file into the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <param name="frameName">
            The name of the frame to load the file in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            <note>
            The file should exist within the base directory set with <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>.
            </note>
            </remarks>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GoBack">
            <summary>
            Navigates one step back in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Reload">
            <summary>
            Reloads the current page.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String,System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:AwesomiumSharp.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.CallJavascriptFunction(System.String,System.String,System.String,AwesomiumSharp.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="frameName">
            Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.CreateObject(System.String)">
            <summary>
            Creates a new global Javascript object that will persist throughout
            the lifetime of this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>. This is useful for exposing your application's
            data and events to Javascript. This object is managed directly by Awesomium
            so you can modify its properties and bind callback functions via
            <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.SetObjectProperty(System.String,System.String,AwesomiumSharp.JSValue)"/> and <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.SetObjectCallback(System.String,System.String,AwesomiumSharp.JSCallback)"/>, 
            respectively.
            </summary>
            <param name="objectName">
            The name of the object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.DestroyObject(System.String)">
            <summary>
            Destroys a Javascript object previously created with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            </summary>
            <param name="objectName">
            The name of the object to destroy.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetObjectProperty(System.String,System.String,AwesomiumSharp.JSValue)">
            <summary>
            Sets a property of a Javascript object previously created with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            </summary>
            <example>
            An example of usage:
            <code>
            webView.CreateObject("MyObject");
            webView.SetObjectProperty("MyObject", "color", "blue");
            
            // You can now access this object's property via Javascript on any 
            // page loaded into this WebControl:
            var myColor = MyObject.color; // value would be "blue"
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="propertyName">
            The name of the property to create.
            </param>
            <param name="val">
            The initial javascript-value of the property.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetObjectCallback(System.String,System.String,AwesomiumSharp.JSCallback)">
            <summary>
            Binds a callback function to a Javascript object previously created with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            This is very useful for passing events from Javascript to your application.
            </summary>
            <example>
            An example of usage:
            <code>
            public void OnSelectItem(object sender, JSCallbackEventArgs e)
            {
                System.Console.WriteLine( "Player selected item: " + e.args[0].ToString() );
            }
            
            public void initWebControl()
            {
                webView.CreateObject("MyObject");
                webView.SetObjectCallback("MyObject", "SelectItem", OnSelectItem);
            }
            
            // You can now call the function "OnSelectItem" from Javascript:
            MyObject.SelectItem("shotgun");
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="callbackName">
            The name of the Javascript function that will call the callback.
            </param>
            <param name="callback">
            Reference to a <see cref="T:AwesomiumSharp.JSCallback"/> implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Cut">
            <summary>
            Cuts the text currently selected in this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, when it has keyboard focus
            (usually in a text-box), using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Copy">
            <summary>
            Copies the text currently selected in this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Paste">
            <summary>
            Pastes the text currently in the system clipboard, to this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>,
            when it has keyboard focus (usually in a text-box).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SelectAll">
            <summary>
            Selects all content on the current page.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ResetZoom">
            <summary>
            Resets the zoom level.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.GetZoomForHost(System.String)">
            <summary>
            Gets the zoom factor (percent of page) saved for a certain hostname.
            </summary>
            <param name="host">
            The hostname whose saved zoom setting will be retrieved.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetTransparent(System.Boolean)">
            <summary>
            Sets whether or not pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
            <param name="isTransparent">
            Whether or not this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> is transparent.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetURLFilteringMode(AwesomiumSharp.URLFilteringMode)">
            <summary>
            Sets the current URL Filtering Mode to use.
            </summary>
            <param name="filteringMode">
            The URL Filtering Mode to use. Default is <see cref="F:AwesomiumSharp.URLFilteringMode.None"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.AddURLFilter(System.String)">
            <summary>
            Adds a new URL Filter rule.
            </summary>
            <param name="filter">
            A string with optional wildcards that describes a certain URL.
            </param>
            <example>
            For example, to match all URLs from the domain "google.com", your filter string can be: http://google.com/*
            </example>
            <remarks> 
            You may also use the "local://" scheme prefix to describe the URL to the base directory
            (set via <see cref="M:AwesomiumSharp.WebCore.SetBaseDirectory(System.String)"/>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ClearAllURLFilters">
            <summary>
            Clears all URL Filter rules previously added with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.AddURLFilter(System.String)"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Defines a new Header Definition or updates it if it already exists.
            </summary>
            <param name="name">
            The unique name of the Header Definition; this is used to refer to it later in <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/> and related methods.
            </param>
            <param name="fields">
            A name/value collection representing field names and their respective values.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)">
            <summary>
            Adds a new a header re-write rule. 
            All requests whose URL matches the specified rule will have its HTTP headers re-written 
            with the specified header definition before sending it to the server.
            </summary>
            <param name="rule">
            A string with optional wildcards (*, ?) that matches the URL(s) that will have their headers 
            re-written with the specified header definition.
            </param>
            <param name="name">
            The name of the header definition (specified in <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.RemoveHeaderRewriteRule(System.String)">
            <summary>
            Removes a header re-write rule previously added with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>.
            </summary>
            <param name="rule">
            The rule to remove (should match the string specified in for the "rule" parameter 
            in <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>, exactly).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.RemoveHeaderRewriteRulesByDefinition(System.String)">
            <summary>
            Removes all header re-write rules that are using a certain header definition.
            </summary>
            <param name="name">
            The name of the header definition (specified in <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            Specify an empty string, to remove all header re-write rules.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ChooseFile(System.String)">
            <summary>
            Call this in response to a <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> event,
            to indicate the file to be uploaded.
            </summary>
            <param name="filePath">
            The full path to the file that was selected.
            </param>
            <remarks>
            Alternatively, if you opened a modal dialog from within your <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles"/> handler,
            you can define the files to be uploaded by using the <see cref="P:AwesomiumSharp.SelectLocalFilesEventArgs.SelectedFiles"/>
            property.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Print">
            <summary>
            Prints the current page.
            </summary>
            <remarks>
            To suppress the printer selection dialog
            and print immediately using OS defaults, 
            see <see cref="M:AwesomiumSharp.WebCore.SuppressPrinterDialog(System.Boolean)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.RequestScrollData(System.String)">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.ScrollDataReceived"/> event.
            </remarks>
            <param name="frameName">
            The frame's scroll data to retrieve. Leave blank to get the main frame's scroll data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.Find(System.String,System.Boolean,System.Boolean)">
            <summary>
            Start finding a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.FindNext(System.Boolean)"/> method.
            To get actual stats about a certain query, please see <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise. The default is true.
            </param>
            <param name="caseSensitive">
            True to perform a case sensitive search. False otherwise. The default is false.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.FindNext(System.Boolean)">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <param name="forward">
            True to search forward, down the page. False otherwise. The default is true.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.StopFind(System.Boolean)">
            <summary>
            Stops the last active search (started with <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Find(System.String,System.Boolean,System.Boolean)"/>).
            </summary>
            <remarks>
            This will un-highlight all matches of a previous call to <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Find(System.String,System.Boolean,System.Boolean)"/>.
            </remarks>
            <param name="clearSelection">
            True to also deselect the currently selected string. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.TranslatePage(System.String,System.String)">
            <summary>
            Attempt automatic translation of the current page via Google Translate.
            </summary>
            <remarks>
            The defined language codes are ISO 639-2.
            </remarks>
            <param name="sourceLanguage">
            The language to translate from (for ex. "en" for English).
            </param>
            <param name="targetLanguage">
            The language to translate to (for ex. "fr" for French).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ActivateIME(System.Boolean)">
            <summary>
            Call this method to let the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> know you will be passing
            text input via IME and will need to be notified of any IME-related
            events (such as caret position, user un-focusing text-box, etc.).
            </summary>
            <param name="activate">
            True to activate IME support. False otherwise.
            </param>
            <seealso cref="E:AwesomiumSharp.Windows.Controls.WebControl.ImeUpdated"/>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create or update the current IME text composition.
            </summary>
            <param name="inputStr">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.ConfirmIMEComposition(System.String)">
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.CancelIMEComposition">
            <summary>
            Cancels IME text composition.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> instance
            (see <see cref="P:System.Windows.UIElement.IsEnabled"/>).
            </exception>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsSourceControlProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsSourceControl"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.contextMenuKey">
            @name Static Resource Keys
            Recource keys of the context menu of a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> and its items.
            @{ 
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.awe_webview_is_dirty(System.IntPtr)">
            @} 
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsDirty"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsResizingProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsResizing"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsLoadingPageProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLoadingPage"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsNavigatingProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsNavigating"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.DirtyBoundsProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.DirtyBounds"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.HistoryBackCountProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.HistoryBackCount"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.HistoryForwardCountProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.HistoryForwardCount"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.TitleProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.HasKeyboardFocusProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.HasKeyboardFocus"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.HasTargetURLProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.HasTargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.TargetURLProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.TargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsCrashedProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsCrashed"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.PageContentsProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.PageContents"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.IsDomReadyProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsDomReady"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.FlushAlphaProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.FlushAlpha"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.HasSelectionProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.HasSelection"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.SelectionProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Selection"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.ZoomProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Zoom"/> dependency property.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Windows.Controls.WebControl.SourceProperty">
            <summary>
            Identifies the <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Source"/> dependency property.
            </summary>
        </member>
        <member name="M:AwesomiumSharp.Windows.Controls.WebControl.OnWebSelectionChanged(System.Object,AwesomiumSharp.WebSelectionEventArgs)">
            <summary>
            Helper callback.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged">
            <summary>
            Occurs when this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> needs to be rendered again.
            </summary>
            <remarks>
            <para>
            This event is fired continuously while <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsDirty"/> is true and until a call 
            to <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Render"/> is made that will render the updated view into an offscreen
            pixel buffer and clear the dirty state.
            </para>
            <para>
            This event is not automatically fired if you are running Awesomium from a non-UI
            thread. Please read the Remarks section of <see cref="M:AwesomiumSharp.WebCore.Update"/> for
            details.
            </para>
            </remarks>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.BeginLoading">
            <summary>
            This event occurs when a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> begins loading a new page (first bits of data received from server).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.BeginNavigation">
            <summary>
            This event occurs when a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.CursorChanged">
            <summary>
            This event occurs when the mouse cursor type changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.KeyboardFocusChanged">
            <summary>
            This event occurs when keyboard focus changes (usually as a result of a text-box being focused).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.TargetUrlChanged">
            <summary>
            This event occurs when the target URL changes (usually the result of hovering over a link).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.ToolTipChanged">
            <summary>
            This event occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.DomReady">
            <summary>
            This event occurs once the document has been parsed for a page but before all resources (images, etc.)
            have been loaded. This is your first chance to execute Javascript on a page (useful for initialization purposes).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.LoadCompleted">
            <summary>
            This event occurs once a page (and all of its sub-frames) has completely finished loading.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.PageContentsReceived">
            <summary>
            This event occurs once the page contents (as text) have been retrieved (usually after the end
            of each page load). This plain text is useful for indexing/search purposes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.OpenExternalLink">
            <summary>
            This event occurs when an external link is attempted to be opened. An external link
            is any link that normally opens in a new window (for example, links with target="_blank", calls
            to window.open(), and URL open events from Flash plugins). You are responsible for
            creating a new <see cref="T:AwesomiumSharp.WebView"/> or <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> to handle these URLs yourself.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.PluginCrashed">
            <summary>
            This event occurs whenever a plugin crashes on a page (usually Flash).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.TitleReceived">
            <summary>
            This event occurs once we receive the page title.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.Move">
            <summary>
            This event occurs whenever the window is requested to be moved (via Javascript).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.Download">
            <summary>
            This event occurs whenever a URL is requested to be downloaded (you must handle this yourself).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.Crashed">
            <summary>
            This event occurs when the renderer (which is isolated in a separate process) crashes unexpectedly.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.SelectLocalFiles">
            <summary>
            This event occurs whenever a page requests a file chooser dialog to be displayed (usually due
            to an upload form being clicked by a user). You will need to display your own dialog.
            Assign the selected local file(s) to <see cref="P:AwesomiumSharp.SelectLocalFilesEventArgs.SelectedFiles"/>
            </summary>
            <remarks>
            The dialog does not have to be modal; this request is non-blocking. Once a file has been chosen by the user,
            you can manually report this back to the view by calling <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ChooseFile(System.String)"/>.
            </remarks>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.ScrollDataReceived">
            <summary>
            This event fires in response to <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.RequestScrollData(System.String)"/>.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.JSConsoleMessageAdded">
            <summary>
            This event occurs whenever a new message is added to the Javascript Console (usually
            the result of a Javascript error).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.FindResultsReceived">
            <summary>
            This event occurs whenever we receive results back from an in-page find operation
            (<see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Find(System.String,System.Boolean,System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.SelectionChanged">
            <summary>
            This event occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.ImeUpdated">
            <summary>
            This event occurs whenever the user does something that changes the 
            position or visibility of the IME Widget. This event is only active when 
            IME is activated (please see <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceRequest">
            <summary>
            This event occurs whenever there is a request for a certain resource (URL). You can either modify the request
            before it is sent or immediately return your own custom response. This is useful for implementing your own
            custom resource-loading back-end or for tracking of resource loads.
            </summary>
        </member>
        <member name="E:AwesomiumSharp.Windows.Controls.WebControl.ResourceResponse">
            <summary>
            This event occurs whenever a response has been received from a server. This is useful for statistics
            and resource tracking purposes.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.LogicalChildren">
            @internal
            <inheritdoc />
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.VisualChildrenCount">
            @internal
            <inheritdoc />
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsLive">
            <summary>
            Gets if the control is live and the view is instantiated.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsSourceControl">
            <summary>
            Gets if this control displays the HTML source of any web-page loaded.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.ContextMenuResourceKey">
            <summary>
            Gets the resource key for the context menu of a <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default context menu.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static local:WebControl.ContextMenuPageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="BrowseBack" CommandTarget="{Binding}" />
                <MenuItem Command="BrowseForward" CommandTarget="{Binding}" />        
                <MenuItem Command="Refresh" CommandTarget="{Binding}" />
                <Separator />
                <MenuItem Command="Print" CommandTarget="{Binding}" />
            </x:Array>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static local:WebControl.ContextMenuInputItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" CommandTarget="{Binding}" />
                <MenuItem Command="Cut" CommandTarget="{Binding}" />        
                <MenuItem Command="Paste" CommandTarget="{Binding}" />
            </x:Array>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static local:WebControl.ContextMenuSelectionItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" CommandTarget="{Binding}" />
                <MenuItem Command="{x:Static local:WebControlCommands.CopyHTML}" CommandTarget="{Binding}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static local:WebControl.ContextMenuLinkItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static local:WebControlCommands.CopyLinkAddress}" CommandTarget="{Binding}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsDirty">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> needs to be rendered again.
            </summary>
            <remarks>
            Internal changes to this property fire the <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/>
            and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events,
            only if <see cref="P:AwesomiumSharp.WebCore.IsAutoUpdateEnabled"/> is true.
            </remarks>
            <seealso cref="E:AwesomiumSharp.Windows.Controls.WebControl.IsDirtyChanged"/>
            <seealso cref="M:AwesomiumSharp.WebCore.Update"/>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsResizing">
            <summary>
            Gets if there is a resize operation pending.
            </summary>
            <returns>
            True if we are waiting for the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> to
            return acknowledgment of a pending resize operation. False otherwise.
            </returns>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsLoadingPage">
            <summary>
            Gets if a page is currently loading in the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsNavigating">
            <summary>
            Gets if the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.IsLoadingPage"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.DirtyBounds">
            <summary>
            Gets the bounds of the area that has changed since the last rendering.
            </summary>
            <returns>
            An <see cref="T:AwesomiumSharp.AweRect"/> representing the bounds of the area that has changed 
            since the last rendering.
            </returns>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.HistoryBackCount">
            <summary>
            Gets the available number of steps back in history.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.HistoryForwardCount">
            <summary>
            Gets the available number of steps forward in history.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded in this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.HasKeyboardFocus">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> currently has keyboard focus.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.HasTargetURL">
            <summary>
            Gets if this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsCrashed">
            <summary>
            Gets if the renderer of this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/> (which is isolated in a separate process) has crashed.
            </summary>
            <remarks>
            When crashed, this control will attempt to recreate its underlying view when any of the following
            methods or properties is called:
            <list type="bullet">
            <item><see cref="M:AwesomiumSharp.Windows.Controls.WebControl.GoToHome"/></item>
            <item><see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)"/></item>
            <item><see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadHTML(System.String,System.String)"/></item>
            <item><see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadFile(System.String,System.String)"/></item>
            <item><see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Reload"/></item>
            <item><see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Source"/></item>
            </list>
            <note>
            It is suggested that you avoid using <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.Reload"/> since what was there in the current
            page that caused the crash in the first place, may crash the view again.
            </note>
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.PageContents">
            <summary>
            Gets the textual representation of the contents of the page currently loaded.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.IsDomReady">
            <summary>
            Gets if DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.FlushAlpha">
            <summary>
            Gets or sets if we should flush the alpha channel to completely opaque values, during rendering.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.Selection">
            <summary>
            Gets a <see cref="P:AwesomiumSharp.Windows.Controls.WebControl.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.Zoom">
            <summary>
            Gets or sets the zoom factor (page percentage).
            </summary>
            <returns>
            An integer value representing the zoom factor (page percentage)
            for the current hostname. The default is 100.
            </returns>
            <remarks>
            Valid range is from 10 to 500.
            </remarks>
        </member>
        <member name="P:AwesomiumSharp.Windows.Controls.WebControl.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </summary>
            <returns>
            An absolute <see cref="T:System.Uri"/> representing the current URL presented 
            by this <see cref="T:AwesomiumSharp.Windows.Controls.WebControl"/>.
            </returns>
            <seealso cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="T:AwesomiumSharp.Windows.Controls.WebSourceControl">
            <summary>
            Represents a WPF control that displays the HTML source of any web-page loaded using <see cref="M:AwesomiumSharp.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.FindResultsReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AwesomiumSharp.WebView.FindResultsReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.FindResultsReceived"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:AwesomiumSharp.GetFindResultsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:AwesomiumSharp.GetFindResultsEventArgs">
            <summary>
            Provides data for the <see cref="E:AwesomiumSharp.WebView.FindResultsReceived"/> and 
            <see cref="E:AwesomiumSharp.Windows.Controls.WebControl.FindResultsReceived"/> events.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.Selection">
            <summary>
            Provides textual information about the current selection range of a page.
            </summary>
        </member>
        <member name="F:AwesomiumSharp.Selection.Empty">
            <summary>
            Represents an empty selection range.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Selection.Text">
            <summary>
            Gets the selected content in a page, in plain text form.
            </summary>
        </member>
        <member name="P:AwesomiumSharp.Selection.HTML">
            <summary>
            Gets the selected content in a page, in HTML form.
            </summary>
        </member>
        <member name="T:AwesomiumSharp.EnableThemingInScope">
            <summary>
            This class is intended to be used with the 'using' statement,
            to activate an activation context for turning on visual theming at
            the beginning of a scope, and have it automatically deactivated
            when the scope is exited.
            </summary>
            <remarks>
            With a little bit of tuning, this old traditional model, still works even
            in Windows 7. In our case we need it to apply theming to the native
            Print dialog of the view. It may be useless in the future.
            </remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
